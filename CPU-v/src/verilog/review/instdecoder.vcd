$date
	Wed Feb 26 11:01:04 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module instdecoder_tb $end
$var wire 5 ! rs2 [4:0] $end
$var wire 5 " rs1 [4:0] $end
$var wire 5 # rd [4:0] $end
$var wire 1 $ invalid_instruction $end
$var wire 48 % inst_flags [47:0] $end
$var reg 1 & en $end
$var reg 32 ' instruction_code [31:0] $end
$scope module dut $end
$var wire 1 & en $end
$var wire 32 ( instruction_code [31:0] $end
$var wire 5 ) rs2 [4:0] $end
$var wire 5 * rs1 [4:0] $end
$var wire 5 + rd [4:0] $end
$var wire 5 , opcode [4:0] $end
$var wire 48 - inst_flags [47:0] $end
$var wire 1 . imm12_31 $end
$var wire 3 / funct3 [2:0] $end
$var reg 1 0 inst_add $end
$var reg 1 1 inst_addi $end
$var reg 1 2 inst_and $end
$var reg 1 3 inst_andi $end
$var reg 1 4 inst_auipc $end
$var reg 1 5 inst_beq $end
$var reg 1 6 inst_bge $end
$var reg 1 7 inst_bgeu $end
$var reg 1 8 inst_blt $end
$var reg 1 9 inst_bltu $end
$var reg 1 : inst_bne $end
$var reg 1 ; inst_csrrc $end
$var reg 1 < inst_csrrci $end
$var reg 1 = inst_csrrs $end
$var reg 1 > inst_csrrsi $end
$var reg 1 ? inst_csrrw $end
$var reg 1 @ inst_csrrwi $end
$var reg 1 A inst_ebreak $end
$var reg 1 B inst_ecall $end
$var reg 1 C inst_jal $end
$var reg 1 D inst_jalr $end
$var reg 1 E inst_lb $end
$var reg 1 F inst_lbu $end
$var reg 1 G inst_lh $end
$var reg 1 H inst_lhu $end
$var reg 1 I inst_lui $end
$var reg 1 J inst_lw $end
$var reg 1 K inst_mret $end
$var reg 1 L inst_or $end
$var reg 1 M inst_ori $end
$var reg 1 N inst_sb $end
$var reg 1 O inst_sh $end
$var reg 1 P inst_sll $end
$var reg 1 Q inst_slli $end
$var reg 1 R inst_slt $end
$var reg 1 S inst_slti $end
$var reg 1 T inst_sltiu $end
$var reg 1 U inst_sltu $end
$var reg 1 V inst_sra $end
$var reg 1 W inst_srai $end
$var reg 1 X inst_sret $end
$var reg 1 Y inst_srl $end
$var reg 1 Z inst_srli $end
$var reg 1 [ inst_sub $end
$var reg 1 \ inst_sw $end
$var reg 1 ] inst_wfi $end
$var reg 1 ^ inst_xor $end
$var reg 1 _ inst_xori $end
$var reg 1 $ invalid_instruction $end
$scope task get_alu1_op $end
$upscope $end
$scope task get_alu_op $end
$upscope $end
$scope task get_csr_op $end
$upscope $end
$scope task get_jmp_op $end
$upscope $end
$scope task get_mechine_op $end
$upscope $end
$scope task get_mem_load_op $end
$upscope $end
$scope task get_mem_store_op $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
b0 /
0.
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
1&
b0 %
0$
b0 #
b0 "
b0 !
$end
#200
b1111 #
b1111 +
b100000000 %
b100000000 -
14
b101 ,
b11110010111 '
b11110010111 (
#400
b0 #
b0 +
b0 %
b0 -
04
b0 ,
b0 '
b0 (
#410
b1111 #
b1111 +
b1111 "
b1111 *
b1100 !
b1100 )
b1000000000 %
b1000000000 -
11
b100 ,
b10110001111000011110010011 '
b10110001111000011110010011 (
#610
b0 #
b0 +
b0 "
b0 *
b0 !
b0 )
b0 %
b0 -
01
b0 ,
b0 '
b0 (
#620
1.
b111 #
b111 +
b1111 "
b1111 *
b101 !
b101 )
b100000000000000000000000000000000000000000 %
b100000000000000000000000000000000000000000 -
1?
b11100 ,
b1 /
b110000010101111001001111110011 '
b110000010101111001001111110011 (
#820
0.
b0 #
b0 +
b0 "
b0 *
b0 !
b0 )
b0 %
b0 -
0?
b0 ,
b0 /
b0 '
b0 (
#830
b1 #
b1 +
b101 !
b101 )
b10000000 %
b10000000 -
1C
b11011 ,
b11010010100000000000011101111 '
b11010010100000000000011101111 (
#1030
b0 #
b0 +
b0 !
b0 )
b0 %
b0 -
0C
b0 ,
b0 '
b0 (
#1040
b1100 #
b1100 +
b10 "
b10 *
b1 !
b1 )
b1000000000000000000000000000000000000 %
b1000000000000000000000000000000000000 -
1\
b1000 ,
b10 /
b100010010011000100011 '
b100010010011000100011 (
#1240
b0 #
b0 +
b0 "
b0 *
b0 !
b0 )
b0 %
b0 -
0\
b0 ,
b0 /
b0 '
b0 (
#1250
b10 !
b10 )
b1000000000000000000000000000000000000000000000 %
b1000000000000000000000000000000000000000000000 -
1K
b11100 ,
b110000001000000000000001110011 '
b110000001000000000000001110011 (
#1450
b0 !
b0 )
b0 %
b0 -
0K
b0 ,
b0 '
b0 (
#1460
1.
b100 #
b100 +
b1111 "
b1111 *
b100000 %
b100000 -
1:
b11000 ,
b1 /
b100000001111001001001100011 '
b100000001111001001001100011 (
#1660
0.
b0 #
b0 +
b0 "
b0 *
b0 %
b0 -
0:
b0 ,
b0 /
b0 '
b0 (
#1670
b1010 #
b1010 +
b1010 "
b1010 *
b11111 !
b11111 )
b100000000000 %
b100000000000 -
1M
b100 ,
b110 /
b111111101010110010100010011 '
b111111101010110010100010011 (
#1870
b0 #
b0 +
b0 "
b0 *
b0 !
b0 )
b0 %
b0 -
0M
b0 ,
b0 /
b0 '
b0 (
#1880
1$
b11111 ,
b10000000000000000000000001111111 '
b10000000000000000000000001111111 (
#2080
