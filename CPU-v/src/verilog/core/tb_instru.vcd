$date
	Tue Feb 25 10:47:15 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module instdecoder_tb $end
$var wire 5 ! rs2 [4:0] $end
$var wire 5 " rs1 [4:0] $end
$var wire 5 # rd [4:0] $end
$var wire 9 $ mem_op [8:0] $end
$var wire 8 % mechie_op [7:0] $end
$var wire 9 & jmp_op [8:0] $end
$var wire 1 ' invalid_instruction $end
$var wire 7 ( imm_2531 [6:0] $end
$var wire 12 ) imm_2032 [11:0] $end
$var wire 20 * imm_1231 [19:0] $end
$var wire 1 + cust_op $end
$var wire 6 , csr_op [5:0] $end
$var wire 19 - alu_op [18:0] $end
$var reg 1 . en $end
$var reg 32 / instruction_code [31:0] $end
$scope module dut $end
$var wire 1 . en $end
$var wire 32 0 instruction_code [31:0] $end
$var wire 5 1 rs2 [4:0] $end
$var wire 5 2 rs1 [4:0] $end
$var wire 5 3 rd [4:0] $end
$var wire 5 4 opcode [6:2] $end
$var wire 7 5 imm_2531 [6:0] $end
$var wire 12 6 imm_2032 [11:0] $end
$var wire 20 7 imm_1231 [19:0] $end
$var wire 3 8 funct3 [2:0] $end
$var reg 19 9 alu_op [18:0] $end
$var reg 6 : csr_op [5:0] $end
$var reg 1 + cust_op $end
$var reg 1 ' invalid_instruction $end
$var reg 9 ; jmp_op [8:0] $end
$var reg 8 < mechie_op [7:0] $end
$var reg 9 = mem_op [8:0] $end
$scope function get_alu1_op $end
$var reg 3 > funct3 [2:0] $end
$upscope $end
$scope function get_alu_op $end
$var reg 3 ? funct3 [2:0] $end
$upscope $end
$scope function get_csr_op $end
$var reg 3 @ funct3 [2:0] $end
$upscope $end
$scope function get_jmp_op $end
$var reg 3 A funct3 [2:0] $end
$upscope $end
$scope function get_mechine_op $end
$var reg 32 B instruction_code [31:0] $end
$upscope $end
$scope function get_mem_load_op $end
$var reg 3 C funct3 [2:0] $end
$upscope $end
$scope function get_mem_store_op $end
$var reg 3 D funct3 [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
1.
b0 -
b0 ,
0+
b0 *
b0 )
b0 (
0'
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#200
b1111 #
b1111 3
b100000000 &
b100000000 ;
z'
b101 4
b11110010111 /
b11110010111 0
#400
b0 #
b0 3
0'
b0 &
b0 ;
b0 4
b0 /
b0 0
#410
b1 (
b1 5
b10110001111000 *
b10110001111000 7
b101100 )
b101100 6
b1111 #
b1111 3
b1111 "
b1111 2
b1100 !
b1100 1
b10000000000 -
b10000000000 9
b0 >
z'
b100 4
b10110001111000011110010011 /
b10110001111000011110010011 0
#610
b0 (
b0 5
b0 *
b0 7
b0 )
b0 6
b0 #
b0 3
b0 "
b0 2
b0 !
b0 1
0'
b0 -
b0 9
b0 4
b0 /
b0 0
#620
b11000 (
b11000 5
b110000010101111001 *
b110000010101111001 7
b1100000101 )
b1100000101 6
b111 #
b111 3
b1111 "
b1111 2
b101 !
b101 1
b1 ,
b1 :
b1 @
z'
b11100 4
b1 8
b110000010101111001001111110011 /
b110000010101111001001111110011 0
#820
b0 (
b0 5
b0 *
b0 7
b0 )
b0 6
b0 #
b0 3
b0 "
b0 2
b0 !
b0 1
0'
b0 ,
b0 :
b0 4
b0 8
b0 /
b0 0
#830
b1101 (
b1101 5
b11010010100000000 *
b11010010100000000 7
b110100101 )
b110100101 6
b1 #
b1 3
b101 !
b101 1
b1 &
b1 ;
z'
b11011 4
b11010010100000000000011101111 /
b11010010100000000000011101111 0
#1030
b0 (
b0 5
b0 *
b0 7
b0 )
b0 6
b0 #
b0 3
b0 !
b0 1
0'
b0 &
b0 ;
b0 4
b0 /
b0 0
#1040
b100010010 *
b100010010 7
b1 )
b1 6
b1100 #
b1100 3
b10 "
b10 2
b1 !
b1 1
b100000000 $
b100000000 =
b10 D
z'
b1000 4
b10 8
b100010010011000100011 /
b100010010011000100011 0
#1240
b0 *
b0 7
b0 )
b0 6
b0 #
b0 3
b0 "
b0 2
b0 !
b0 1
0'
b0 $
b0 =
b0 4
b0 8
b0 /
b0 0
#1250
b11000 (
b11000 5
b110000001000000000 *
b110000001000000000 7
b1100000010 )
b1100000010 6
b10 !
b10 1
b100 %
b100 <
b110000001000000000000001110011 B
z'
b11100 4
b110000001000000000000001110011 /
b110000001000000000000001110011 0
#1450
b0 (
b0 5
b0 *
b0 7
b0 )
b0 6
b0 !
b0 1
0'
b0 %
b0 <
b0 4
b0 /
b0 0
#1460
b10 (
b10 5
b100000001111001 *
b100000001111001 7
b1000000 )
b1000000 6
b100 #
b100 3
b1111 "
b1111 2
b1 &
b1 ;
b1 A
z'
b11000 4
b1 8
b100000001111001001001100011 /
b100000001111001001001100011 0
#1660
b0 (
b0 5
b0 *
b0 7
b0 )
b0 6
b0 #
b0 3
b0 "
b0 2
0'
b0 &
b0 ;
b0 4
b0 8
b0 /
b0 0
#1670
b11 (
b11 5
b111111101010110 *
b111111101010110 7
b1111111 )
b1111111 6
b1010 #
b1010 3
b1010 "
b1010 2
b11111 !
b11111 1
b100000000000000000 -
b100000000000000000 9
b110 >
z'
b100 4
b110 8
b111111101010110010100010011 /
b111111101010110010100010011 0
#1870
b0 (
b0 5
b0 *
b0 7
b0 )
b0 6
b0 #
b0 3
b0 "
b0 2
b0 !
b0 1
0'
b0 -
b0 9
b0 4
b0 8
b0 /
b0 0
#1880
b1000000 (
b1000000 5
b10000000000000000000 *
b10000000000000000000 7
b100000000000 )
b100000000000 6
1+
z'
b11111 4
b10000000000000000000000001111111 /
b10000000000000000000000001111111 0
#2080
